// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var ResultExn = require("rescript-result-exn/lib/js/src/ResultExn.bs.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");

const JsonRecords = require('json-records');
const fs = require('fs');
;

function MakeJsonRecordEventGateway($$Event, JsonRecordConf) {
  var createTableIfNotExist = function (param) {
    return ResultExn.tryExec(function (param) {
                var createFile = (function (path) {
        fs.writeFileSync(path, '{}');
      });
                createFile(JsonRecordConf.fileName);
              });
  };
  var dropTableIfExist = function (param) {
    return ResultExn.tryExec(function (param) {
                var dropFile = (function (path) {
        fs.unlinkSync(path);
      });
                dropFile(JsonRecordConf.fileName);
              });
  };
  var getEvents = function (from, limit) {
    return ResultExn.tryExec(function (param) {
                var getResult = (function (path, from, limit, parseFunc) {
        const jr = new JsonRecords(path);
        const result = jr
          .get( r => (limit ? ((r.id >= from) && (r.id < from + limit)) : (r.id >= from)))
        return result.map(r => {
          if((!r.id) || (!r.val)) {
            throw new Error("result is not event record: " + JSON.stringify(r));
          }
          const parseResult = parseFunc(r.val);
          if(!parseResult) { 
            throw new Error("event is not valid: " + JSON.stringify(r));
          }
          return parseResult;
        });
      });
                return getResult(JsonRecordConf.fileName, from, limit, $$Event.parseUnknown);
              });
  };
  var insertEvents = function (events) {
    return ResultExn.tryExec(function (param) {
                var state = Belt_Result.getExn(getEvents(0, undefined));
                var maxId = state.length;
                var addBulk = (function (path, events, firstId) {
        const result = events.map((e, i) => ({
          id: (firstId + i),
          val: e
        }));
        const jr = new JsonRecords(path);
        jr.addBulk(result);
      });
                addBulk(JsonRecordConf.fileName, events, maxId + 1 | 0);
              });
  };
  return {
          createTableIfNotExist: createTableIfNotExist,
          dropTableIfExist: dropTableIfExist,
          getEvents: getEvents,
          insertEvents: insertEvents
        };
}

exports.MakeJsonRecordEventGateway = MakeJsonRecordEventGateway;
/*  Not a pure module */
