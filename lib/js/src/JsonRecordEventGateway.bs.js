// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var ResultExn = require("rescript-result-exn/lib/js/src/ResultExn.bs.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");

const JsonRecords = require('json-records');
const fs = require('fs');
;

function MakeJsonRecordEventGateway($$Event, JsonRecordConf) {
  var createTableIfNotExist = function (param) {
    return ResultExn.tryExec(function (param) {
                var createFile = (function (path) {
        fs.writeFileSync(path, '{}');
      });
                createFile(JsonRecordConf.fileName);
              });
  };
  var dropTableIfExist = function (param) {
    return ResultExn.tryExec(function (param) {
                var dropFile = (function (path) {
        fs.unlinkSync(path);
      });
                dropFile(JsonRecordConf.fileName);
              });
  };
  var getEvents = function (from, limit, time) {
    return ResultExn.tryExec(function (param) {
                var getResult = (function (path, from, limit, time, parseFunc) {
        const jr = new JsonRecords(path);
        let timeCond = (r) => (time ? (r.timestamp >= time) : true);
        let idCond = (r) => (r.id >= from);
        return jr
          .get( r => (timeCond(r) && idCond(r)))
          .filter((el, i) => (limit ? (i < limit) : true))
          .map(r => {
            if((!r.id) || (!r.val)) {
              throw new Error("result is not event record: " + JSON.stringify(r));
            }
            const parseResult = parseFunc(r.val);
            if(!parseResult) { 
              throw new Error("event is not valid: " + JSON.stringify(r));
            }
            return {id: r.id, val: parseResult, timestamp: r.timestamp};
          });
      });
                return getResult(JsonRecordConf.fileName, from, limit, time, $$Event.parseUnknown);
              });
  };
  var insertEvent = function ($$event) {
    return ResultExn.tryExec(function (param) {
                var state = Belt_Result.getExn(getEvents(0, undefined, undefined));
                var maxId = state.length;
                var addEvent = (function (path, event, id) {
        const jr = new JsonRecords(path);
        jr.add({ id: id, val: event, timestamp: Date.now() });
      });
                addEvent(JsonRecordConf.fileName, $$event, maxId + 1 | 0);
                return maxId + 1 | 0;
              });
  };
  return {
          createTableIfNotExist: createTableIfNotExist,
          dropTableIfExist: dropTableIfExist,
          getEvents: getEvents,
          insertEvent: insertEvent
        };
}

exports.MakeJsonRecordEventGateway = MakeJsonRecordEventGateway;
/*  Not a pure module */
