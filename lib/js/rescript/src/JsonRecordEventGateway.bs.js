// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("rescript/lib/js/js_exn.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

const JsonRecords = require('json-records');
const fs = require('fs');
;

function MakeJsonRecordEventGateway($$Event, JsonRecordConf) {
  var createTableIfNotExist = function (param) {
    try {
      var createFile = (function (path) {
      fs.writeFileSync(path, '{}');
    });
      createFile(JsonRecordConf.fileName);
      return {
              TAG: /* Ok */0,
              _0: undefined
            };
    }
    catch (raw_e){
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return {
                TAG: /* Error */1,
                _0: Belt_Option.getWithDefault(e._1.message, "")
              };
      } else {
        return {
                TAG: /* Error */1,
                _0: "Unknown error"
              };
      }
    }
  };
  var dropTableIfExist = function (param) {
    try {
      var dropFile = (function (path) {
        fs.unlinkSync(path);
      });
      dropFile(JsonRecordConf.fileName);
      return {
              TAG: /* Ok */0,
              _0: undefined
            };
    }
    catch (raw_e){
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return {
                TAG: /* Error */1,
                _0: Belt_Option.getWithDefault(e._1.message, "")
              };
      } else {
        return {
                TAG: /* Error */1,
                _0: "Unknown error"
              };
      }
    }
  };
  var getEvents = function (from, limit) {
    try {
      var getResult = (function (path, from, limit, parseFunc) {
      const jr = new JsonRecords(path);
      const result = jr
        .get( r => (limit ? ((r.id >= from) && (r.id < from + limit)) : (r.id >= from)))
      return result.map(r => {
        if((!r.id) || (!r.val)) {
          throw new Error("result is not event record: " + JSON.stringify(r));
        }
        const parseResult = parseFunc(r.val);
        if(!parseResult) { 
          throw new Error("event is not valid: " + JSON.stringify(r));
        }
        return parseResult;
      });
    });
      return {
              TAG: /* Ok */0,
              _0: getResult(JsonRecordConf.fileName, from, limit, $$Event.parseUnknown)
            };
    }
    catch (raw_e){
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return {
                TAG: /* Error */1,
                _0: Belt_Option.getWithDefault(e._1.message, "")
              };
      } else {
        return {
                TAG: /* Error */1,
                _0: "Unknown error"
              };
      }
    }
  };
  var insertEvents = function (events) {
    try {
      var state = Belt_Result.getExn(getEvents(0, undefined));
      var maxId = state.length;
      var addBulk = (function (path, events, firstId) {
        const result = events.map((e, i) => ({
          id: (firstId + i),
          val: e
        }));
        const jr = new JsonRecords(path);
        jr.addBulk(result);
      });
      addBulk(JsonRecordConf.fileName, events, maxId + 1 | 0);
      return {
              TAG: /* Ok */0,
              _0: undefined
            };
    }
    catch (raw_e){
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        return {
                TAG: /* Error */1,
                _0: Belt_Option.getWithDefault(e._1.message, "")
              };
      } else {
        return {
                TAG: /* Error */1,
                _0: "Unknown error"
              };
      }
    }
  };
  return {
          createTableIfNotExist: createTableIfNotExist,
          dropTableIfExist: dropTableIfExist,
          getEvents: getEvents,
          insertEvents: insertEvents
        };
}

exports.MakeJsonRecordEventGateway = MakeJsonRecordEventGateway;
/*  Not a pure module */
